--- 
sections_008: 
  permalink: form-for-fields-for
  content_id: "8"
  title: form_for, fields_for
  body: |
    ## form_for and fields_for
    
    ### form_for
    
    rhtml:
        # Input
        <% form_for (:person, @person, :url => { :action => 'update', :id => 1 }, :html => { :multipart => :true}) do  |form|%> 
          Name:    <%= form.text_field  :title, :size => 30 %>
          Notes:   <%= form.text_area  :content, :size => "10x20" %>
          Photo:   <%= form.file_field   :photo_data %>
          <%= submit_tag "Update" %>
        <% end %>
        
        # Output
        <form action="/user/update/1" enctype="multipart/form-data" method="post"> 
          Name:  <input id="person_title" name="person[title]" size="30" type="text" />
          Notes: <textarea cols="10" id="person_content" name="person[content]" rows="20"></textarea>
          Photo: <input id="person_photo_data" name="person[photo_data]" type="file" />
          <input name="commit" type="submit" value="Update" />
        </form>
    
    ### fields_for
    
    rhtml:
        # Input
        <% fields_for :phone, @phone do |phone_fields| %> 
          Home:   <%= phone_fields.text_field :home %>
          Work:   <%= phone_fields.text_field :work %>
          Cell:   <%= phone_fields.text_field :cell %>  
        <% end %> 
    
        # Output
        Home: <input id="phone_home" name="phone[home]" type="text" />
        Work: <input id="phone_work" name="phone[work]" type="text" />
        Cell: <input id="phone_cell" name="phone[cell]" type="text" /> 

  id: "8"
  summary: form helpers to wrap model objects
sections_010: 
  permalink: input-fields
  content_id: "8"
  title: input field helpers
  body: |-
    ## Input fields
    
    ### text_field
    
    rhtml:
        # Input
        <%= text_field(:post, :title, :size => 20, :class => "blue" ) %>
    
        # Output
        <input type="text" id="post_title" name="post[title]" size="20" value="#{post.title}" class="blue" />
    
    ### text_area
    
    rhtml:
        # Input
        <%= text_area(:post, :comment, :size => "20x10", :class => "area" ) %>
    
        # Output
        <textarea cols="20" rows="10" id="post_comment" name="post[comment]" class="area">#{@post.comment}</textarea> 
    
    ### file_field
    
    rhtml:
        # Input
        <%= file_field(:post, :attachment, :class => "file_input")  %>
    
        # Output
        <input type="file" id="post_attachment" name="post[attachment]" class="file_input"> 
    
    ### radio_button
    
    rhtml:
        # Input
        <%= radio_button(:post, :category, "ruby") %>
        <%= radio_button(:post, :category, "python") %>
    
        # Output
        <input type="radio" id="post_category" name="post[category]" value="ruby">
        <input type="radio" id="post_category" name="post[category]" value="python">
    
    ### check_box    
    
    rhtml:
        # Input
        <%= check_box(:post, :validated, {}, "yes", "no") %>
        
        # Ouput
        <input type="checkbox" id="post_validated" name="post[validated]" value="yes" />
        <input type="hidden" name="post[validated]" value="no">
    
    ### password_field
    
    rhtml:
        # Input
        <%= password_field(:login, :pass, :size => 20, :class => "password_input") %>
    
        # Output
        <input type="password" id="login_pass" name="login[pass]" value="#{@login.pass}" size="20" class="password_input" /> 
    
    ### hidden_field
    
    rhtml:
        # Input
        hidden_field(:signup, :pass_confirm)
        
        # Output
        <input type="hidden" id="signup_pass_confirm" name="signup[pass_confirm]" value="#{@signup.pass_confirm}" />
  id: "10"
  summary: standard input fields, such as text fields and check boxes
sections_009: 
  permalink: form-tag
  content_id: "8"
  title: form_tag helpers
  body: |
    ## form_tag helpers
    
    For forms which do not have a corresponding model. Syntax is identical to form helpers, but the first argument is the name of the field, not the model:
    
    rhtml:
        # Input
        <%= file_field_tag(:avatar, :accept => "image/png,image/gif") %>
    
        # Output
        <input accept="image/png,image/gif,image/jpeg" id="avatar" name="avatar" type="file" /> 
    
    (Tab.1 form_tag methods)
    
    `check_box_tag`
    ------------------
    `field_set_tag`
    ------------------
    `file_field_tag`
    ------------------
    
    `form_tag`
    ------------------
    `hidden_field_tag`
    ------------------
    `image_submit_tag`
    ------------------
    
    `password_field_tag`
    ------------------
    `radio_button_tag`
    ------------------
    `select_tag`
    ------------------
    
    `submit_tag`
    ------------------
    `text_area_tag`
    ------------------
    `text_field_tag`
    
    

  id: "9"
  summary: helpers for form fields that do not have a corresponding model
sections_011: 
  permalink: select-helpers
  content_id: "8"
  title: select
  body: "## select\r\n\
    \r\n\
    ### collection_select\r\n\
    \r\n\
    rhtml:\r\n    # Input\r\n    <%= collection_select(:user, :id, User.find(:all, :order => \"name\"), :id, :name, {}, :class => \"red\") %>\r\n\
    \r\n    # Output\r\n    <select id=\"user_id\" name=\"user[id]\" class=\"red\">\r\n      <option value=\"1\">David</option>\r\n    </select>\r\n\
    \r\n\
    ### option_groups_from_collection_for_select\r\n\
    \r\n\
    rhtml:\r\n    # Input\r\n    <%= option_groups_from_collection_for_select(Author.find(:all), :books, :name, :id, :title, 3) %>\r\n\
    \r\n    # Output\r\n    <optgroup label=\"J K Rowling\">\r\n      <option_ value=\"1\">Order of the Phoenix</option>\r\n      <option value=\"4\">The Deathly Hallows</option>\r\n    </optgroup>\r\n    <optgroup label=\"Douglas Coupland\">\r\n      <option value=\"3\" selected=\"selected\">Generation X</option>\r\n      <option value=\"12\">Girlfriend In A Coma</option>\r\n      <option value=\"5\">Shampoo Planet</option>\r\n    </optgroup> \r\n\
    \r\n\
    ### options_for_select\r\n\
    \r\n\
    rhtml:\r\n    # Input\r\n    <%= options_for_select( {\"Mary\" => \"\xC2\xA32\", \"Lucy\" => \"\xC2\xA34\" ,\"Anne\" => \"\xC2\xA36\"}, [\"\xC2\xA34\", \"\xC2\xA36\"]) %>\r\n\
    \r\n    # Output\r\n    <option value=\"\xC2\xA32\">Mary</option>\r\n    <option value=\"\xC2\xA34\" selected=\"selected\">Lucy</option> \r\n    <option value=\"\xC2\xA36\" selected=\"selected\">Anne</option>\r\n\
    \r\n\
    ### options_from_collection_for_select\r\n\
    \r\n\
    rhtml:\r\n    # Input\r\n    <%= options_from_collection_for_select(Author.find(:all), :id, :name) %>\r\n\
    \r\n    # Output\r\n    <option value=\"#{@author.id}\">#{@author.name}</option> \r\n    \r\n\
    ### select\r\n\
    \r\n\
    rhtml:\r\n    # Input\r\n    <%= select(:post, :person_id, Person.find(:all).collect { |p| [p.name, p.id] }, {:include_blank => true}) %>\r\n\
    \r\n    # Output\r\n    <select name=\"post[person_id]\">\r\n      <option value=\"\"></option>\r\n      <option value=\"1\" selected=\"selected\">David</option>\r\n       <option value=\"2\">Sam</option>\r\n    </select> "
  id: "11"
  summary: helpers to create drop-down select lists
sections_012: 
  permalink: time-zone-select
  content_id: "8"
  title: time_zone_select
  body: "## time_zone_select\r\n\
    \r\n\
    ### time_zone_options_for_select\r\n\
    \r\n\
    rhtml:\r\n    # Input\r\n    <%= time_zone_options_for_select (\"Arizona\", TimeZone.us_zones) %>\r\n\
    \r\n    # Output\r\n    <option value=\"Hawaii\">(GMT-10:00) Hawaii</option>\r\n    <option value=\"Alaska\">(GMT-09:00) Alaska</option>\r\n    <option value=\"Pacific Time (US &amp; Canada)\">(GMT-08:00) Pacific Time (US &amp; Canada)</option>\r\n    <option value=\"Arizona\" selected=\"selected\">(GMT-07:00) Arizona</option>\r\n    ..\r\n    <option value=\"Nuku\xE2\x80\x99alofa\">(GMT+13:00) Nuku\xE2\x80\x99alofa</option>\r\n\
    \r\n\
    ## time_zone_select\r\n\
    \r\n\
    rhtml:\r\n    # Input\r\n    <%= time_zone_select(:user, :zone, TimeZone.us_zones, { :include_blank => \"Please select your time zone\" }, :class => \"time_select\") %>\r\n    \r\n    # Output\r\n    <select class=\"time_select\" id=\"user_zone\" name=\"user[zone]\">\r\n      <option value=\"Hawaii\">(GMT-10:00) Hawaii</option>\r\n      <option value=\"Alaska\">(GMT-09:00) Alaska</option>\r\n      <option value=\"Pacific Time (US &amp; Canada)\">(GMT-08:00) Pacific Time (US &amp; Canada)</option>\r\n      <option value=\"Arizona\">(GMT-07:00) Arizona</option>\r\n      ..\r\n      <option value=\"Nuku\xE2\x80\x99alofa\">(GMT+13:00) Nuku\xE2\x80\x99alofa</option>\r\n    </select> "
  id: "12"
  summary: provides a list of time zones in a drop-down list
sections_001: 
  permalink: rails-migrations-methods
  content_id: "1"
  title: Methods
  body: |
    ## Methods
    
    ### add_column
    
    Creates a new column on the specified table.
    
    ruby:
        add_column :table_name, :column_name, :column_type, { options }
    
    + `:null => true` or `false` - if `false`, the underlying column has a `NOT NULL` constraint added by the database engine
    + `:limit => size` - set a `limit` on the `size` of the field
    + `:default => value` - set a default `value` for the column
    
    ### add_index
    
    Creates an index for the specified table, the name of which defaults to `table_column_index`
    
    ruby:
        add_index :table_name, :column_name, :unique => true, :name => "chosen_index_name"
    
    ### change_column
    
    Change the data type of the specified column
    
    ruby:
        change_column :table_name, :column_name, :new_type, { options as add_column }
    
    ### create_table
    
    Creates a table on the database. Creates a table called `:table_name` and makes the table object available to a block that can then add columns to it, following the same format as `add_column`.
    ruby:
        create_table :table_name, { options } do |t|
          t.column :column_name, :column_type, :options
        end
    
    + `:force => true` - forces drop of an existing table of the same name before creation the new one
    + `:temporary => true` - creates a temporary table, one that goes away when the application disconnects from the database
    + `:id => false` - defines a table with no primary key, for example when you need to define a join table
    + `:primary_key => :new_primary_key_name` - overrides the default name of `id` for the primary column, use this to specify the name of the column in the database that Rails will use to store the primary key
    + `:options => ""` - lets you specify options to your underlying database, e.g. `"auto_increment = 10000"`. Will lose default `"ENGINE=InnoDB statement"`.
    
    ### execute
    
    Takes a single string identifying a valid SQL command to execute directly
    
    ruby:
        execute "alter table line_items add constraint fk_line_item_products foreign key (product_id) references products(id)"
    
    ### IrreversibleMigration
    
    Use in the down method of a migration file to raise an exception when the `up` methods of the same migration file can not be reversed, e.g. changing a column type from `:integer` to `:string`
    
    ruby:
        raise ActiveRecord::IrreversibleMigration
    
    ### rename_table
    
    Renames the specified table.
    
    ruby:
        rename_table :new_table_name, :old_table_name
    
    ### rename_column
    
    Renames the old_column_name to new_column_name
    
    ruby:
        rename_column :old_column_name, :new_column_name
    
    ### rename_table
    
    Renames the specified table.
    
    ruby:
        rename_table :new_table_name, :old_table_name
    
    ### remove_index
    
    Remove an index for the specified table.
    
    ruby:
        remove_index :table_name, :column_name

  id: "1"
  summary: interact with your database using migration methods
sections_002: 
  permalink: database-mapping
  content_id: "1"
  title: Database mapping
  body: |
    ## Database Mapping
    
    table:
    *Rails*      *db2*	   *mysql*	   *openbase*   *Oracle*
    `:binary`    blob(32678)   blob		   object	 blob
    `:boolean`   decimal(1)    tinyint(1)	   boolean	 number(10)
    `:date`      date	   date		   date		 date
    `:datetime`  timestamp     datetime	   datetime	 date
    `:decimal`   decimal       decimal         decimal	 decimal
    `:float`     float         float	   float	 number
    `:integer`   int	   int(11)         integer	 number(38)
    `:string`    varchar(255)  varchar(255)    char(4096)    varchar2(255)
    
    table:
    *Rails*      *postgresql*  *sqlite*      *sqlserver*     *Sybase*
    `:binary`    bytea         blob          image           image
    `:boolean`   boolean       boolean       bit             bit
    `:date`      date          date          datetime        datetime
    `:datetime`  timestamp     datetime      datetime        datetime
    `:decimal`   decimal       decimal       decimal         decimal
    `:float`     float         float         float(8)        float(8)
    `:integer`   integer       integer       int             int
    `:string`    \*            varchar(255)  varchar(255)    varchar(255)

  id: "2"
  summary: how migration column types map to your underlying database
sections_003: 
  permalink: example-migration-file
  content_id: "1"
  title: Example migration
  body: |-
    ## Example migration file
    
    ruby:
        class CreateCustomers < ActiveRecord::Migration
    
        def self.up
            # Create "Customers" table
            create_table :customers, :primary_key => :customer_id, :options => "auto_increment = 10000" do |t|
              # Add columns to "Customers" table
              t.column :customer_id, :integer
              t.column :name,        :string,    :limit => 30, :null => false
              t.column :age,         :integer
              t.column :premium,     :boolean,   :default => 0
              t.column :photo,       :binary,    :limit => 2.megabytes
              t.column :thumbnail,   :binary,    :limit => 256.kilobytes
              t.column :dob,         :date,      :null => false
              t.column :created_at,  :timestamp
              t.column :notes,       :text,      :default => "No notes recorded"
          end
          # Add "surname" column to "Customers" table 
          add_column :customers, :surname,   :string,   :limit => 50
          # Add "price" column to "Orders" table
          add_column :orders,    :price,     :decimal,  :precision => 8, :scale => 2
          # Create a record on the "Customers" table
          Customer.create :name => "David", :surname => "Smith", :age => "32", :premium => "1", :notes => "One of our top customers!"
        end
    
        def self.down 
          # Delete the "Customers" table
            drop_table :customers
          end
        end
  id: "3"
  summary: What a migration file looks like
sections_004: 
  permalink: rake-tasks
  content_id: "1"
  title: Rake tasks
  body: |-
    ## Rake tasks
    
    (Tab.1 Rake Tasks)
    
    Generate migration              
    -----------------------------------------
      `ruby script/generate migration your_chosen_migration_name`
    
    run all unapplied migrations    
    -----------------------------------------
      `rake db:migrate`
    
    migrate database to specific version    
    -----------------------------------------
     `rake db:migrate VERSION=18`
    
    use your migrations to recreate the tables in the testing or production databases
    ---------------------------------------------------------------------------------
      `rake db:migrate RAILS_ENV=production`
    
    Create a `db/schema.rb` file that can be portably used against any database supported by ActiveRecord
    -------------------------
      `rake db:schema:dump`
    
    Load a `schema.rb` file into the database
    -----------------------------------------
      `rake db:schema:load`
    
    Loads a `schema.rb` file into the database and then loads the initial database fixtures.
    -----------------------------------------
      `rake db:bootstrap`
  id: "4"
  summary: a list of built-in migration-related Rake tasks
sections_005: 
  permalink: directory-structure
  content_id: "1"
  title: Directory Structure
  body: |-
    ## Directory structure
    
    + rails_root
        + db
            + schema.rb
            + migrate
                + 001_create_customers
                + 002_add_photo
                + 003_alter_surname
  id: "5"
  summary: where migration files go
sections_006: 
  permalink: test-section-link
  content_id: "1"
  title: Test section
  body: Testing a new section.
  id: "6"
  summary: testing a new section
sections_007: 
  permalink: country-select
  content_id: "8"
  title: country_select
  body: |
    ## country_select
    
    ### country_options_for_select
    
    rhtml:
        # Input
        <%= country_options_for_select("United Kingdom", ["France", "United States", "Canada"]) %>
    
        # Output
        <option value="France">France</option>
        <option value="United States">United States</option>
        <option value="Canada">Canada</option>
        <option value="">-------------</option>
        <option value="Afghanistan">Afghanistan</option>
        <option value="Albania">Albania</option>
        ..
        <option value="Zimbabwe">Zimbabwe</option> 
    
    ### country_select  
    
    rhtml:
        # Input
        <%= country_select(:user, :country, ["France", "United States", "Canada"], {}, :class => "select_country") %>
    
        # Output
        <select id="user_country" name="user[country]">
          <option value="France">France</option>
          <option value="United States">United States</option>
          <option value="Canada">Canada</option>
          <option value="">-------------</option>
          <option value="Afghanistan">Afghanistan</option> 
          ..
          <option value="Zimbabwe">Zimbabwe</option> 
        </select>
    

  id: "7"
  summary: creates a drop-down select list of most countries in the world
