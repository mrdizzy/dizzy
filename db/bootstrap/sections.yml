--- 
sections_008: 
  permalink: form_for_fields_for_helpers_builders
  content_id: "4"
  title: form_for and fields_for
  body: |-
    
    <section>
    
    <subhead>form builders that wrap model objects</subhead>
    
    <minihead>form_for</minihead>
    
    <p>This helper is used to wrap a Rails model object. You assign an @instance_variable in your controller, passing it an instance of an ActiveRecord model object. You then pass @instance_variable to the <b>form_for</b> helper. It will then map your model object&apos;s methods/attributes to the <c>&lt;input&gt;</c> fields in your form, automatically filling in their values if they exist. Because you specify your model object at the form level, it creates a scope for that model object around all the <c>&lt;input&gt;</c> fields within the <c>form_for</c> block, which means you do not have to repeat the name of the model object for every tag. E.g. <c>text_field :person, :name</c> becomes <c>form.text_field :name</c> as the model <c>Person</c> has already been assigned in the <b>form_for</b> tag. </p>
    
    <r>  form_for(:object, @object_instance, {options}) </r>
    
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell><p>Code</p></Cell>
    	<Cell><rh>&lt;% form_for (:person, @person, :url =&gt; { :action =&gt; &apos;update&apos;, :id =&gt; 1 }, :html =&gt; { :multipart =&gt; :true}) do  |form|%&gt;  </rh>
    <rh>  Name:    &lt;%= form.text_field  :title, :size =&gt; 30 %&gt; </rh><rh>  Notes:   &lt;%= form.text_area  :content, :size =&gt; &quot;10x20&quot; %&gt; </rh><rh>  Photo:   &lt;%= form.file_field   :photo_data %&gt; </rh><rh>  &lt;%= submit_tag &quot;Update&quot; %&gt; </rh>
    <rh>&lt;% end %&gt;</rh></Cell>
    
    	<Cell><p>Output</p></Cell>
    	<Cell><rh>&lt;form action=&quot;/user/update/1&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;  </rh>
    <rh> Name:  &lt;input id=&quot;person_title&quot; name=&quot;person[title]&quot; size=&quot;30&quot; type=&quot;text&quot; /&gt; </rh><rh> Notes: &lt;textarea cols=&quot;10&quot; id=&quot;person_content&quot; name=&quot;person[content]&quot; rows=&quot;20&quot;&gt;&lt;/textarea&gt; </rh><rh> Photo: &lt;input id=&quot;person_photo_data&quot; name=&quot;person[photo_data]&quot; type=&quot;file&quot; /&gt; </rh><rh>  &lt;input name=&quot;commit&quot; type=&quot;submit&quot; value=&quot;Update&quot; /&gt; </rh>
    <rh>&lt;/form&gt;</rh>
    </Cell>
    </sample_code>
    
    <minihead>fields_for </minihead>
    
    <p>Creates a scope around a specific model object like <b>form_for</b>, but doesn&apos;t create any <c>&lt;form&gt;</c> tags. This makes <c>fields_for</c> suitable for handling multiple model objects in a single form.  </p>
    
    <r>  fields_for(:object, @object_instance) </r>
    
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell><p>Code</p></Cell>
    	<Cell><rh>&lt;% fields_for :phone, @phone do |phone_fields| %&gt;  </rh><rh>    Home:   &lt;%= phone_fields.text_field :home %&gt; </rh><rh>    Work:   &lt;%= phone_fields.text_field :work %&gt; </rh><rh>    Cell:   &lt;%= phone_fields.text_field :cell %&gt;   </rh><rh>&lt;% end %&gt;</rh></Cell>
    <Cell><p>Output</p></Cell>
    <Cell><rh>Home: &lt;input id=&quot;phone_home&quot; name=&quot;phone[home]&quot; type=&quot;text&quot; /&gt; </rh><rh>Work: &lt;input id=&quot;phone_work&quot; name=&quot;phone[work]&quot; type=&quot;text&quot; /&gt; </rh><rh>Cell: &lt;input id=&quot;phone_cell&quot; name=&quot;phone[cell]&quot; type=&quot;text&quot; /&gt;</rh></Cell></sample_code> 
    
    </section>
  id: "8"
  summary: form builders that wrap model objects
sections_001: 
  permalink: rails-migrations-methods
  content_id: "1"
  title: Methods
  body: |-
    <section>
    		<subhead>Methods</subhead>
    			
    <method>
    <minihead>add_column</minihead>
    <p>Creates a new column on the specified table.</p>
    <r>  add_column :table_name, :column_name, :column_type, { options }</r>
    <p><c>:null => true</c> or <c>false</c> - if false, the underlying column has a not null constraint added by the database engine</p>
    <p><c>:limit => size</c> - set a limit on the size of the field</p>
    <p><c>:default => value</c> - set a default value for the column</p>
    
    </method>
    <method_odd>
    <minihead>add_index</minihead>
    <p>Creates an index for the specified table, the name of which defaults to <c>table_column_index</c>.</p>
    <r>  add_index :table_name, :column_name, :unique => true, :name =&gt; "chosen_index_name"</r>
    </method_odd>
    <method>
    <minihead>change_column</minihead>
    <p>Change the data type of the specified column</p>
    <r>  change_column :table_name, :column_name, :new_type, { options as add_column }</r>
    </method>
    <method_odd>
    <minihead>create_table</minihead> 
    <p>Creates a table on the database. Creates a table called <c>:table_name</c> and makes the table object available to a block that can then add columns to it, following the same format as <c>add_column</c>.</p>
    <r>  create_table :table_name, { options } do |t|
        t.column :column_name, :column_type, :options
      end</r>
    <p><c>:force => true</c> - forces drop of an existing table of the same name before creation the new one</p>
    <p><c>:temporary => true</c> - creates a temporary table, one that goes away when the application disconnects from the database</p> 
    <p><c>:id => false</c> - defines a table with no primary key, for example when you need to define a join table</p>
    <p><c>:primary_key => :new_primary_key_name</c> - overrides the default name of <c>:id</c> for the primary column, use this to specify the name of the column in the database that Rails will use to store the primary key</p>
    <p><c>:options => ""</c> - lets you specify options to your underlying database, e.g. <c>"auto_increment = 10000"</c>. Will lose default <c>"ENGINE=InnoDB statement"</c>.</p>
    
    </method_odd>
    
    <method>
    				<minihead>execute</minihead>
    				<p>Takes a single string identifying a valid SQL command to execute directly</p>
    				<r>  execute "alter table line_items add constraint fk_line_item_products foreign key (product_id) references products(id)"</r>
    </method>
    
    <method_odd><minihead>IrreversibleMigration</minihead>
    <p>Use in the <c>down</c> method of a migration file to raise an exception when the <c>up</c> methods of the same migration file can not be reversed, e.g. changing a column type from <c>:integer</c> to <c>:string</c>.</p>
    <r>  raise ActiveRecord::IrreversibleMigration</r>
    </method_odd>
    <method>
    <minihead>rename_table</minihead>
    <p>Renames the specified table.</p>
    <r>  rename_table :new_table_name, :old_table_name</r>
    </method>
    <method_odd>
    <minihead>rename_column</minihead>
    <p>Renames the <c>old_column_name</c> to <c>new_column_name</c></p>
    <r>  rename_column :old_column_name, :new_column_name</r>
    </method_odd>
    <method>
    <minihead>rename_table</minihead>
    <p>Renames the specified table.</p>
    <r>  rename_table :new_table_name, :old_table_name</r>
    </method>
    <method_odd>
    <minihead>remove_index</minihead>
    <p>Remove an index for the specified table.</p>
    <r>  remove_index :table_name, :column_name</r>
    </method_odd>
    </section>
  id: "1"
  summary: interact with your database using migration methods
sections_002: 
  permalink: database-mapping
  content_id: "1"
  title: Database mapping
  body: |-
    
    <section>
    <subhead>Mapping</subhead>
    
    <Table xmlns:aid="http://ns.adobe.com/AdobeInDesign/4.0/" aid:table="table" aid:trows="9" aid:tcols="9">
    
    <Cell aid:table="cell"><b>Rails</b></Cell><Cell aid:table="cell"><b>db2</b></Cell><Cell aid:table="cell"><b>mysql</b></Cell><Cell aid:table="cell"><b>openbase</b></Cell><Cell aid:table="cell"><b>Oracle</b></Cell><Cell aid:table="cell"><b>postgresql</b></Cell><Cell aid:table="cell"><b>sqlite</b></Cell><Cell aid:table="cell"><b>sqlserver</b></Cell><Cell aid:table="cell"><b>Sybase</b></Cell>
    
    <Cell aid:table="cell"><c>:binary</c></Cell><Cell aid:table="cell">blob(32768)</Cell><Cell aid:table="cell">blob</Cell><Cell aid:table="cell">object</Cell><Cell aid:table="cell">blob</Cell><Cell aid:table="cell">bytea</Cell><Cell aid:table="cell">blob</Cell><Cell aid:table="cell">image</Cell><Cell aid:table="cell">image</Cell>
    
    <Cell aid:table="cell"><c>:boolean</c></Cell><Cell aid:table="cell">decimal(1)</Cell><Cell aid:table="cell">tinyint(1)</Cell><Cell aid:table="cell">boolean</Cell><Cell aid:table="cell">number(1)</Cell><Cell aid:table="cell">boolean</Cell><Cell aid:table="cell">boolean</Cell><Cell aid:table="cell">bit</Cell><Cell aid:table="cell">bit</Cell>
    
    <Cell aid:table="cell"><c>:date</c></Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">datetime</Cell>
    
    <Cell aid:table="cell"><c>:datetime</c></Cell><Cell aid:table="cell">timestamp</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">timestamp</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">datetime</Cell>
    
    <Cell aid:table="cell"><c>:decimal</c></Cell><Cell aid:table="cell">decimal</Cell><Cell aid:table="cell">decimal</Cell><Cell aid:table="cell">decimal</Cell><Cell aid:table="cell">decimal</Cell><Cell aid:table="cell">decimal</Cell><Cell aid:table="cell">decimal</Cell><Cell aid:table="cell">decimal</Cell><Cell aid:table="cell">decimal</Cell>
    
    <Cell aid:table="cell"><c>:float</c></Cell><Cell aid:table="cell">float</Cell><Cell aid:table="cell">float</Cell><Cell aid:table="cell">float</Cell><Cell aid:table="cell">number</Cell><Cell aid:table="cell">float</Cell><Cell aid:table="cell">float</Cell><Cell aid:table="cell">float(8)</Cell><Cell aid:table="cell">float(8)</Cell>
    
    <Cell aid:table="cell"><c>:integer</c></Cell><Cell aid:table="cell">int</Cell><Cell aid:table="cell">int(11)</Cell><Cell aid:table="cell">integer</Cell><Cell aid:table="cell">number(38)</Cell><Cell aid:table="cell">integer</Cell><Cell aid:table="cell">integer</Cell><Cell aid:table="cell">int</Cell><Cell aid:table="cell">int</Cell>
    
    <Cell aid:table="cell"><c>:string</c></Cell><Cell aid:table="cell">varchar(255)</Cell><Cell aid:table="cell">varchar(255)</Cell><Cell aid:table="cell">char(4096)</Cell><Cell aid:table="cell">varchar2(255)</Cell><Cell aid:table="cell">*</Cell><Cell aid:table="cell">varchar(255)</Cell><Cell aid:table="cell">varchar(255)</Cell><Cell aid:table="cell">varchar(255)</Cell>
    
    
    <Cell aid:table="cell"><c>:text</c></Cell><Cell aid:table="cell">clob(32768)</Cell><Cell aid:table="cell">text</Cell><Cell aid:table="cell">text</Cell><Cell aid:table="cell">clob</Cell><Cell aid:table="cell">text</Cell><Cell aid:table="cell">text</Cell><Cell aid:table="cell">text</Cell><Cell aid:table="cell">text</Cell>
    
    
    <Cell aid:table="cell"><c>:time</c></Cell><Cell aid:table="cell">time</Cell><Cell aid:table="cell">time</Cell><Cell aid:table="cell">time</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">time</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">time</Cell>
    
    
    <Cell aid:table="cell"><c>:timestamp</c></Cell><Cell aid:table="cell">timestamp</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">timestamp</Cell><Cell aid:table="cell">date</Cell><Cell aid:table="cell">timestamp</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">datetime</Cell><Cell aid:table="cell">timestamp</Cell>
    
    </Table>
    </section>
  id: "2"
  summary: how migration column types map to your underlying database
sections_003: 
  permalink: example-migration-file
  content_id: "1"
  title: Example migration
  body: |-
    <section>
    <subhead>db/migrate/example_001.rb</subhead>
    <method>
    <rnum>class CreateCustomers &lt; ActiveRecord::Migration
    
      def self.up
        # Create "Customers" table
        create_table :customers, :primary_key =&gt; :customer_id, :options =&gt; "auto_increment = 10000" do |t|
          # Add columns to "Customers" table
          t.column :customer_id, :integer
          t.column :name,        :string,    :limit =&gt; 30, :null =&gt; false
          t.column :age,         :integer
          t.column :premium,     :boolean,   :default =&gt; 0
          t.column :photo,       :binary,    :limit =&gt; 2.megabytes
          t.column :thumbnail,   :binary,    :limit =&gt; 256.kilobytes
          t.column :dob,         :date,      :null =&gt; false
          t.column :created_at,  :timestamp
          t.column :notes,       :text,      :default =&gt; "No notes recorded"
        end
        # Add "surname" column to "Customers" table 
        add_column :customers, :surname,   :string,   :limit =&gt; 50
        # Add "price" column to "Orders" table
        add_column :orders,    :price,     :decimal,  :precision =&gt; 8, 
    :scale =&gt; 2
        # Create a record on the "Customers" table
        Customer.create :name =&gt; "David", :surname =&gt; "Smith", :age =&gt; "32",
    :premium =&gt; "1", :notes =&gt; "One of our top customers!"
      end
    
      def self.down 
        # Delete the "Customers" table
        drop_table :customers
      end
    end</rnum>
    </method>
    </section>
  id: "3"
  summary: what a migration file looks like
sections_004: 
  permalink: rake-tasks
  content_id: "1"
  title: Rake tasks
  body: |-
    
    <section>
    <subhead>rake</subhead>
    
    <method>
    <minihead>Generate migration</minihead>
    <p><c>ruby script/generate migration your_chosen_migration_name</c></p>
    </method>
    
    <method>
    <minihead>run all unapplied migrations</minihead>
    <p><c>rake db:migrate</c></p>
    </method>
    
    <method>
    <minihead>migrate database to specific version</minihead>
    <p><c>rake db:migrate VERSION=18</c></p>
    </method>
    
    <method>
    <minihead>use your migrations to recreate the tables in the testing or production databases</minihead>
    <p><c>rake db:migrate RAILS_ENV=production</c></p>
    </method>
    
    <method>
    <minihead>Create a <c>db/schema.rb</c> file that can be portably used against any database supported by ActiveRecord</minihead>
    <p><c>rake db:schema:dump</c></p>
    </method>
    
    <method>
    <minihead>Load a schema.rb file into the database</minihead>
    <p><c>rake db:schema:load</c></p>
    </method>
    
    <method>
    <minihead>Loads a schema.rb file into the database and then loads the initial database fixtures.</minihead>
    <p><c>rake db:bootstrap</c></p>
    </method>
    
    
    
    
    </section>
  id: "4"
  summary: a list of built-in migration-related Rake tasks
sections_005: 
  permalink: directory-structure
  content_id: "1"
  title: Directory Structure
  body: "   <section>\r\n\
    <subhead>Directory structure</subhead>\r\n\
    <directory_structure>\r\n <li> rails_root</li>\r\n  <directory_structure>\r\n   <li> db</li>\r\n    <directory_structure>\r\n     <li> schema.rb</li>\r\n    </directory_structure>\r\n    <directory_structure>\r\n     <li> migrate</li>\r\n      <directory_structure>\r\n       <li> 001_create_customers</li>\r\n       <li> 002_add_photo</li>\r\n       <li> 003_alter_surname</li>\r\n      </directory_structure>\r\n    </directory_structure>\r\n  </directory_structure>\r\n\
    </directory_structure>\r\n\
    </section>"
  id: "5"
  summary: where migration files go
sections_006: 
  permalink: model-form-input-field-helpers
  content_id: "4"
  title: Model-based input fields
  body: |
    <section>
    <subhead>Input field helpers</subhead>
    <p>All of these helpers take an <c>{html_options}</c> hash which will be converted to HTML attributes. E.g. passing <c>:class =&gt; "bold"</c> will add a <c>class="bold"</c> attribute to the HTML tag.</p>
    
    <minihead>text_field</minihead>
    <rh>text_field(:object_name, :method, {html_options})</rh>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= text_field(:post, :title, :size =&gt; 20, :class =&gt; "blue") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="text" id="post_title" name="post[title]" size="20" value="#{@post.title}" class="blue" /&gt;</rh></Cell>
    </sample_code>
    
    <minihead>text_area</minihead>
    <r>text_area(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= text_area(:post, :comment, :size => "20x10", :class => "area") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;textarea cols="20" rows="10" id="post_comment" name="post[comment]" class="area"&gt;#{@post.comment}&lt;/textarea&gt;</rh></Cell>
    </sample_code>
    
    <minihead>file_field</minihead>
    <p>Returns a file upload tag. Make sure that your form is using multipart =&gt; true</p>
    <r>file_field(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= file_field(:post, :attachment, :class =&gt; "file_input") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="file" id="post_attachment" name="post[attachment]" class="file_input"&gt;</rh></Cell>
    </sample_code>
    
    
    <minihead>radio_button</minihead>
    
    <p>Returns an <c>&lt;input type="radio"&gt;</c> HTML tag. If the value returned by <c>:method</c> is the same as <c>tag_value,</c> then the radio button will be selected.</p>
    
    <r> radio_button(:object_name, :method, "tag_value", {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= radio_button(:post, :category, "ruby") %&gt;
    &lt;%= radio_button(:post, :category, "python") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="radio" id="post_category" name="post[category]" value="ruby"&gt;
    &lt;input type="radio" id="post_category" name="post[category]" value="python"&gt;</rh></Cell>
    </sample_code>
    
    
    <minihead>check_box</minihead>
    <p>Returns an <c>&lt;input type="checkbox"&gt;</c> HTML tag. If the value returned by <c>:method</c> is above zero, then the checkbox will be checked. <c>checked_value</c> defaults to <c>1</c> while <c>unchecked_value</c> defaults to <c>0</c>.  Because HTML standards say that unchecked checkboxes don't post anything, a hidden field with the same name as the checkbox is automatically created to contain the <c>unchecked_value</c> as a workaround. </p>
    
    <r>check_box(:object_name, :method, {html_options}, "checked_value", "unchecked_value")</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= checkbox(:post, :validated, {}, "yes", "no") %&gt;
    &lt;%= radio_button(:post, :category, "python") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="checkbox" id="post_validated" name="post[validated]" value="yes" /&gt;
    &lt;input type="hidden" name="post[validated]" value="no"&gt;</rh></Cell>
    </sample_code>
    
    
    <minihead>password_field</minihead>
    
    <r>password_field(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= password_field(:login, :pass, :size => 20, :class =&gt; "password_input") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="password" id="login_pass" name="login[pass]" value="#{@login.pass}" size="20" class="password_input"&gt;</rh></Cell>
    </sample_code>
    
    
    
    <minihead>hidden_field</minihead>
    
    <r>hidden_field(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= hidden_field(:customer, :barcode) %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="hidden" id="customer_barcode" name="customer[barcode]" value="#{@customer.barcode}" /&gt;</rh></Cell>
    </sample_code>
    
    </section>

  id: "6"
  summary: create HTML <code>&lt;input&gt;</code> fields that work with your models
sections_007: 
  permalink: form-parameters
  content_id: "4"
  title: Params
  body: |
    
    <section>
    <subhead>params[] </subhead>
    
    <p>When a form is submitted to a Rails application, it parses the raw data and constructs a special hash called <c>params</c> for us to access that data. Simple key/value pairs in the form are converted into key/value pairs in the params hash. However, if a form field contains square brackets <c>[]</c>, Rails will create nested hashes as follows: </p>
    
    <Table aid:trows="5" aid:tcols="2">
    	<Cell><h3>Form input</h3></Cell>
    	<Cell><h3>params hash</h3></Cell>
    	<Cell><r>id=3245</r></Cell>
    	<Cell><r>{:id =&gt; &quot;3245&quot;}</r></Cell>
    	<Cell><r>customer[name]=Miranda</r></Cell>
    	<Cell><r>{:customer =&gt; {:name =&gt; &quot;Miranda}}</r></Cell>
    	<Cell><r>customer[dob][year]=1979</r></Cell>
    	<Cell><r>{:customer =&gt; {:dob =&gt; {:year =&gt; &quot;1979&quot;}}}</r></Cell>
    	<Cell><r>customer[dob][month]=Jan</r></Cell>
    	<Cell><r>{:customer =&gt; {:dob =&gt; {:month =&gt; &quot;Jan&quot;}}}</r></Cell>
    </Table> 
    
    <p>So to find the value of <c>id</c> we would use <c>params[:id]</c>. To find the value of the <c>customer[name]</c> we would use <c>params[:customer][:name]</c>.</p>
    </section>

  id: "7"
  summary: How form parameters get passed into the <code>params[]</code> hash
