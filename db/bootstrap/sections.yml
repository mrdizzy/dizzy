--- 
sections_008: 
  permalink: form_for_fields_for_helpers_builders
  content_id: "4"
  title: form_for and fields_for
  body: "<subhead>form builders that wrap model objects</subhead>\r\n\
    \r\n\
    <minihead>form_for</minihead>\r\n\
    \r\n\
    <r>  form_for(:object, @object_instance, {options}) </r>\r\n\
    \r\n\
    <sample_code aid:trows=\"2\" aid:tcols=\"2\">\r\n\
    \t<Cell><p>Code</p></Cell>\r\n\
    \t<Cell><rh>&lt;% form_for (:person, @person, :url =&gt; { :action =&gt; &apos;update&apos;, :id =&gt; 1 }, :html =&gt; { :multipart =&gt; :true}) do  |form|%&gt;  </rh>\r\n\
    <rh>  Name:    &lt;%= form.text_field  :title, :size =&gt; 30 %&gt; </rh><rh>  Notes:   &lt;%= form.text_area  :content, :size =&gt; &quot;10x20&quot; %&gt; </rh><rh>  Photo:   &lt;%= form.file_field   :photo_data %&gt; </rh><rh>  &lt;%= submit_tag &quot;Update&quot; %&gt; </rh>\r\n\
    <rh>&lt;% end %&gt;</rh></Cell>\r\n\
    \r\n\
    \t<Cell><p>Output</p></Cell>\r\n\
    \t<Cell><rh>&lt;form action=&quot;/user/update/1&quot; enctype=&quot;multipart/form-data&quot; method=&quot;post&quot;&gt;  </rh>\r\n\
    <rh> Name:  &lt;input id=&quot;person_title&quot; name=&quot;person[title]&quot; size=&quot;30&quot; type=&quot;text&quot; /&gt; </rh><rh> Notes: &lt;textarea cols=&quot;10&quot; id=&quot;person_content&quot; name=&quot;person[content]&quot; rows=&quot;20&quot;&gt;&lt;/textarea&gt; </rh><rh> Photo: &lt;input id=&quot;person_photo_data&quot; name=&quot;person[photo_data]&quot; type=&quot;file&quot; /&gt; </rh><rh>  &lt;input name=&quot;commit&quot; type=&quot;submit&quot; value=&quot;Update&quot; /&gt; </rh>\r\n\
    <rh>&lt;/form&gt;</rh>\r\n\
    </Cell>\r\n\
    </sample_code>\r\n\
    \r\n\
    <minihead>fields_for </minihead>\r\n\
    \r\n\
    <r>  fields_for(:object, @object_instance) </r>\r\n\
    \r\n\
    <sample_code aid:trows=\"2\" aid:tcols=\"2\">\r\n\
    \t<Cell><p>Code</p></Cell>\r\n\
    \t<Cell><rh>&lt;% fields_for :phone, @phone do |phone_fields| %&gt;  </rh><rh>    Home:   &lt;%= phone_fields.text_field :home %&gt; </rh><rh>    Work:   &lt;%= phone_fields.text_field :work %&gt; </rh><rh>    Cell:   &lt;%= phone_fields.text_field :cell %&gt;   </rh><rh>&lt;% end %&gt;</rh></Cell>\r\n\
    <Cell><p>Output</p></Cell>\r\n\
    <Cell><rh>Home: &lt;input id=&quot;phone_home&quot; name=&quot;phone[home]&quot; type=&quot;text&quot; /&gt; </rh><rh>Work: &lt;input id=&quot;phone_work&quot; name=&quot;phone[work]&quot; type=&quot;text&quot; /&gt; </rh><rh>Cell: &lt;input id=&quot;phone_cell&quot; name=&quot;phone[cell]&quot; type=&quot;text&quot; /&gt;</rh></Cell></sample_code> "
  id: "8"
  summary: form builders that wrap model objects
sections_009: 
  permalink: select-menu-helpers
  content_id: "4"
  title: Select helpers
  body: "<subhead>Select field helpers </subhead>\r\n\
    \r\n\
    <minihead>collection_select </minihead>\r\n\
    \r\n\
    <r> collection_select(:object, :method, [collection], :option_key_method, :option_value_method, {options}, {html_options}) </r>\r\n\
    \r\n\
    <sample_code aid:trows=\"2\" aid:tcols=\"2\">\r\n\
    \t<Cell><p>Code:</p></Cell>\r\n\
    \t<Cell><r>@users = User.find(:all, :order =&gt; &quot;name&quot;) </r><r>collection_select(:user, :id, @users, :id, :name, {}, :class =&gt; &quot;red&quot;)</r></Cell>\r\n\
    \r\n\
    \t<Cell><p>Output:</p></Cell>\r\n\
    \t<Cell><rh>&lt;select id=&quot;user_id&quot; name=&quot;user[id]&quot; class=&quot;red&quot;&gt; </rh><rh>&lt;option value=&quot;#{@user.id}&quot;&gt;#{@user.name}&lt;/option&gt;&lt;/select&gt;</rh></Cell>\r\n\
    </sample_code> \r\n\
    \r\n\
    <minihead>option_groups_from_collection_for_select </minihead>\r\n\
    \r\n\
    <r> option_groups_from_collection_for_select([collection], :group_method, :group_label_method, :option_key_method, :option_value_method, :selected_key) </r>\r\n\
    \r\n\
    <sample_code aid:trows=\"2\" aid:tcols=\"2\">\r\n\
    \t<Cell><p>Code:</p></Cell>\r\n\
    \t<Cell><r>option_groups_from_collection_for_select(@authors, :books, :name, :id, :title, 3)</r></Cell>\r\n\
    \r\n\
    \t<Cell><p>Output:</p></Cell>\r\n\
    \t<Cell><rh>&lt;optgroup label=&quot;J K Rowling&quot;&gt; </rh><rh>    &lt;option_ value=&quot;1&quot;&gt;Harry Potter: Order of the Phoenix&lt;/option&gt; </rh><rh>    &lt;option value=&quot;4&quot;&gt;Harry Potter: The Deathly Hallows&lt;/option&gt; </rh><rh>&lt;/optgroup&gt; </rh><rh>&lt;optgroup label=&quot;Douglas Coupland&quot;&gt; </rh><rh>    &lt;option value=&quot;3&quot; selected=&quot;selected&quot;&gt;Generation X&lt;/option&gt; </rh><rh>    &lt;option value=&quot;12&quot;&gt;Girlfriend In A Coma&lt;/option&gt; </rh><rh>    &lt;option value=&quot;5&quot;&gt;Shampoo Planet&lt;/option&gt; </rh><rh>&lt;/optgroup&gt;</rh></Cell>\r\n\
    </sample_code> \r\n\
    \r\n\
    <minihead>options_for_select </minihead>\r\n\
    \r\n\
    <r>options_for_select([{choices}], [selected]) </r>\r\n\
    \r\n\
    <sample_code aid:trows=\"2\" aid:tcols=\"2\">\r\n\
    \t<Cell><p>Code:</p></Cell>\r\n\
    \t<Cell><r>options_for_select( {&quot;Mary&quot; =&gt; &quot;\xC2\xA32&quot;, &quot;Lucy&quot; =&gt; &quot;\xC3\x82\xC2\xA34&quot; ,&quot;Anne&quot; =&gt; &quot;\xC2\xA36&quot;}, [&quot;\xC2\xA34&quot;, &quot;\xC3\x82\xC2\xA36&quot;])</r></Cell>\r\n\
    \t\r\n\
    \t<Cell><p>Output:</p></Cell>\r\n\
    \t<Cell><rh>&lt;option value=&quot;\xC3\x82\xC2\xA32&quot;&gt;Mary&lt;/option&gt; </rh><rh>&lt;option value=&quot;\xC3\x82\xC2\xA34&quot; selected=&quot;selected&quot;&gt;Lucy&lt;/option&gt;  </rh><rh>&lt;option value=&quot;\xC3\x82\xC2\xA36&quot; selected=&quot;selected&quot;&gt;Anne&lt;/option&gt;</rh></Cell>\r\n\
    </sample_code> \r\n\
    \r\n\
    <minihead>options_from_collection_for_select </minihead>\r\n\
    \r\n\
    <r> options_from_collection_for_select([collection], :value_method, :text_method, [selected]) </r>\r\n\
    \r\n\
    <sample_code aid:trows=\"2\" aid:tcols=\"2\">\r\n\
    \t<Cell><p>Code:</p></Cell>\r\n\
    \t<Cell><r>options_from_collection_for_select(@authors, :id, :name)</r></Cell>\r\n\
    \r\n\
    \t<Cell><p>Output:</p></Cell>\r\n\
    \t<Cell><rh>&lt;option value=&quot;#{@author.id}&quot;&gt;#{@author.name}&lt;/option&gt;</rh></Cell>\r\n\
    </sample_code> \r\n\
    \r\n\
    <minihead>select </minihead>\r\n\
    \r\n\
    <r> select(:object_name, :method, [choices], {options}, {html_options}) </r>\r\n\
    \r\n\
    <sample_code aid:trows=\"2\" aid:tcols=\"2\">\r\n\
    \t<Cell><p>Code:</p></Cell>\r\n\
    \t<Cell><r>@people = Person.find(:all).collect { |p| [p.name, p.id] ) </r><r>select(:post, :person_id, @people, {:include_blank =&gt; true})</r></Cell>\r\n\
    \r\n\
    \t<Cell><p>Output:</p></Cell>\r\n\
    \t<Cell><rh>&lt;select name=&quot;post[person_id]&quot;&gt; </rh><rh> &lt;option value=&quot;&quot;&gt;&lt;/option&gt; </rh><rh> &lt;option value=&quot;1&quot; selected=&quot;selected&quot;&gt;David&lt;/option&gt; </rh><rh> &lt;option value=&quot;2&quot;&gt;Sam&lt;/option&gt;&lt;/select&gt;</rh></Cell>\r\n\
    </sample_code> "
  id: "9"
  summary: helpers that build drop-down &lt;select&gt; forms
sections_001: 
  permalink: rails-migrations-methods
  content_id: "1"
  title: Methods
  body: |-
    <section>
    		<subhead>Methods</subhead>
    			
    <method>
    <minihead>add_column</minihead>
    <p>Creates a new column on the specified table.</p>
    <r>  add_column :table_name, :column_name, :column_type, { options }</r>
    <p><c>:null => true</c> or <c>false</c> - if false, the underlying column has a not null constraint added by the database engine</p>
    <p><c>:limit => size</c> - set a limit on the size of the field</p>
    <p><c>:default => value</c> - set a default value for the column</p>
    
    </method>
    <method_odd>
    <minihead>add_index</minihead>
    <p>Creates an index for the specified table, the name of which defaults to <c>table_column_index</c>.</p>
    <r>  add_index :table_name, :column_name, :unique => true, :name =&gt; "chosen_index_name"</r>
    </method_odd>
    <method>
    <minihead>change_column</minihead>
    <p>Change the data type of the specified column</p>
    <r>  change_column :table_name, :column_name, :new_type, { options as add_column }</r>
    </method>
    <method_odd>
    <minihead>create_table</minihead> 
    <p>Creates a table on the database. Creates a table called <c>:table_name</c> and makes the table object available to a block that can then add columns to it, following the same format as <c>add_column</c>.</p>
    <r>  create_table :table_name, { options } do |t|
        t.column :column_name, :column_type, :options
      end</r>
    <p><c>:force => true</c> - forces drop of an existing table of the same name before creation the new one</p>
    <p><c>:temporary => true</c> - creates a temporary table, one that goes away when the application disconnects from the database</p> 
    <p><c>:id => false</c> - defines a table with no primary key, for example when you need to define a join table</p>
    <p><c>:primary_key => :new_primary_key_name</c> - overrides the default name of <c>:id</c> for the primary column, use this to specify the name of the column in the database that Rails will use to store the primary key</p>
    <p><c>:options => ""</c> - lets you specify options to your underlying database, e.g. <c>"auto_increment = 10000"</c>. Will lose default <c>"ENGINE=InnoDB statement"</c>.</p>
    
    </method_odd>
    
    <method>
    				<minihead>execute</minihead>
    				<p>Takes a single string identifying a valid SQL command to execute directly</p>
    				<r>  execute "alter table line_items add constraint fk_line_item_products foreign key (product_id) references products(id)"</r>
    </method>
    
    <method_odd><minihead>IrreversibleMigration</minihead>
    <p>Use in the <c>down</c> method of a migration file to raise an exception when the <c>up</c> methods of the same migration file can not be reversed, e.g. changing a column type from <c>:integer</c> to <c>:string</c>.</p>
    <r>  raise ActiveRecord::IrreversibleMigration</r>
    </method_odd>
    <method>
    <minihead>rename_table</minihead>
    <p>Renames the specified table.</p>
    <r>  rename_table :new_table_name, :old_table_name</r>
    </method>
    <method_odd>
    <minihead>rename_column</minihead>
    <p>Renames the <c>old_column_name</c> to <c>new_column_name</c></p>
    <r>  rename_column :old_column_name, :new_column_name</r>
    </method_odd>
    <method>
    <minihead>rename_table</minihead>
    <p>Renames the specified table.</p>
    <r>  rename_table :new_table_name, :old_table_name</r>
    </method>
    <method_odd>
    <minihead>remove_index</minihead>
    <p>Remove an index for the specified table.</p>
    <r>  remove_index :table_name, :column_name</r>
    </method_odd>
    </section>
  id: "1"
  summary: interact with your database using migration methods
sections_002: 
  permalink: database-mapping
  content_id: "1"
  title: Database mapping
  body: "Mapping\r\n\
    -------\r\n\
    \r\n\
    table:\r\n\
    Rails      db2\t\t     mysql\t       openbase     Oracle\r\n\
    :binary    blob(32678)   blob\t\t   object\t   \tblob\r\n\
    :boolean   decimal(1)    tinyint(1)\t   boolean\t    number(10)\r\n\
    :date      date\t\t     date\t\t   date\t\t    date\r\n\
    :datetime  timestamp     datetime\t   datetime\t    date\r\n\
    :decimal   decimal       decimal       decimal\t    decimal\r\n\
    :float\t   float         float\t       float\t    number\r\n\
    :integer   int\t\t     int(11)       integer\t    number(38)\r\n\
    :string    varchar(255)  varchar(255)  char(4096)   varchar2(255)\r\n\
    \r\n\
    table:\r\n\
    Rails      postgresql  sqlite        sqlserver     Sybase\r\n\
    :binary    bytea       blob          image         image\r\n\
    :boolean   boolean     boolean       bit           bit\r\n\
    :date      date        date          datetime      datetime\r\n\
    :datetime  timestamp   datetime      datetime      datetime\r\n\
    :decimal   decimal     decimal       decimal       decimal\r\n\
    :float     float       float         float(8)      float(8)\r\n\
    :integer   integer     integer       int           int\r\n\
    :string    \\*          varchar(255)  varchar(255)  varchar(255)\r\n\
    \r\n"
  id: "2"
  summary: how migration column types map to your underlying database
sections_003: 
  permalink: example-migration-file
  content_id: "1"
  title: Example migration
  body: |-
    ### db/migrate/example_001.rb
    
    ruby:
        class CreateCustomers < ActiveRecord::Migration
    
          def self.up
            # Create "Customers" table
            create_table :customers, :primary_key => :customer_id, :options => "auto_increment = 10000" do |t|
              # Add columns to "Customers" table
              t.column :customer_id, :integer
              t.column :name,        :string,    :limit => 30, :null => false
              t.column :age,         :integer
              t.column :premium,     :boolean,   :default => 0
              t.column :photo,       :binary,    :limit => 2.megabytes
              t.column :thumbnail,   :binary,    :limit => 256.kilobytes
              t.column :dob,         :date,      :null => false
              t.column :created_at,  :timestamp
              t.column :notes,       :text,      :default => "No notes recorded"
          end
          # Add "surname" column to "Customers" table 
          add_column :customers, :surname,   :string,   :limit => 50
          # Add "price" column to "Orders" table
          add_column :orders,    :price,     :decimal,  :precision => 8, :scale => 2
          # Create a record on the "Customers" table
          Customer.create :name => "David", :surname => "Smith", :age => "32", :premium => "1", :notes => "One of our top customers!"
        end
    
        def self.down 
          # Delete the "Customers" table
            drop_table :customers
          end
        end
  id: "3"
  summary: what a migration file looks like
sections_004: 
  permalink: rake-tasks
  content_id: "1"
  title: Rake tasks
  body: |-
    ###rake
    
    table:
    Generate migration              ruby script/generate migration your_chosen_migration_name
    run all unapplied migrations    rake db:migrate
    migrate database to specific version    rake db:migrate VERSION=18
    use your migrations to recreate the tables in the testing or production databases              rake db:migrate RAILS_ENV=production
    Create a `db/schema.rb` file that can be portably used against any database supported by ActiveRecord         rake db:schema:dump
    Load a schema.rb file into the database       rake db:schema:load
    Loads a schema.rb file into the database and then loads the initial database fixtures.         rake db:bootstrap
  id: "4"
  summary: a list of built-in migration-related Rake tasks
sections_005: 
  permalink: directory-structure
  content_id: "1"
  title: Directory Structure
  body: |-
    ### Directory structure
    
    + rails_root
    ++ db
    + schema.rb
    + migrate
    + 001_create_customers
    + 002_add_photo
    + 003_alter_surname
  id: "5"
  summary: where migration files go
sections_006: 
  permalink: model-form-input-field-helpers
  content_id: "4"
  title: Model-based input fields
  body: |-
    <subhead>Input field helpers</subhead>
    <p>All of these helpers take an <c>{html_options}</c> hash which will be converted to HTML attributes. E.g. passing <c>:class =&gt; "bold"</c> will add a <c>class="bold"</c> attribute to the HTML tag.</p>
    
    <minihead>text_field</minihead>
    <rh>text_field(:object_name, :method, {html_options})</rh>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= text_field(:post, :title, :size =&gt; 20, :class =&gt; "blue") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="text" id="post_title" name="post[title]" size="20" value="#{@post.title}" class="blue" /&gt;</rh></Cell>
    </sample_code>
    
    <minihead>text_area</minihead>
    <r>text_area(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= text_area(:post, :comment, :size => "20x10", :class => "area") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;textarea cols="20" rows="10" id="post_comment" name="post[comment]" class="area"&gt;#{@post.comment}&lt;/textarea&gt;</rh></Cell>
    </sample_code>
    
    <minihead>file_field</minihead>
    <p>Returns a file upload tag. Make sure that your form is using multipart =&gt; true</p>
    <r>file_field(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= file_field(:post, :attachment, :class =&gt; "file_input") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="file" id="post_attachment" name="post[attachment]" class="file_input"&gt;</rh></Cell>
    </sample_code>
    
    
    <minihead>radio_button</minihead>
    
    <p>Returns an <c>&lt;input type="radio"&gt;</c> HTML tag. If the value returned by <c>:method</c> is the same as <c>tag_value,</c> then the radio button will be selected.</p>
    
    <r> radio_button(:object_name, :method, "tag_value", {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= radio_button(:post, :category, "ruby") %&gt;
    &lt;%= radio_button(:post, :category, "python") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="radio" id="post_category" name="post[category]" value="ruby"&gt;
    &lt;input type="radio" id="post_category" name="post[category]" value="python"&gt;</rh></Cell>
    </sample_code>
    
    
    <minihead>check_box</minihead>
    <p>Returns an <c>&lt;input type="checkbox"&gt;</c> HTML tag. If the value returned by <c>:method</c> is above zero, then the checkbox will be checked. <c>checked_value</c> defaults to <c>1</c> while <c>unchecked_value</c> defaults to <c>0</c>.  Because HTML standards say that unchecked checkboxes don't post anything, a hidden field with the same name as the checkbox is automatically created to contain the <c>unchecked_value</c> as a workaround. </p>
    
    <r>check_box(:object_name, :method, {html_options}, "checked_value", "unchecked_value")</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= checkbox(:post, :validated, {}, "yes", "no") %&gt;
    &lt;%= radio_button(:post, :category, "python") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="checkbox" id="post_validated" name="post[validated]" value="yes" /&gt;
    &lt;input type="hidden" name="post[validated]" value="no"&gt;</rh></Cell>
    </sample_code>
    
    
    <minihead>password_field</minihead>
    
    <r>password_field(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= password_field(:login, :pass, :size => 20, :class =&gt; "password_input") %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="password" id="login_pass" name="login[pass]" value="#{@login.pass}" size="20" class="password_input"&gt;</rh></Cell>
    </sample_code>
    
    
    
    <minihead>hidden_field</minihead>
    
    <r>hidden_field(:object_name, :method, {html_options})</r>
    <sample_code aid:trows="2" aid:tcols="2">
    	<Cell>Code:</Cell><Cell><rh>&lt;%= hidden_field(:customer, :barcode) %&gt;</rh></Cell>
    	<Cell>Output:</Cell><Cell><rh>&lt;input type="hidden" id="customer_barcode" name="customer[barcode]" value="#{@customer.barcode}" /&gt;</rh></Cell>
    </sample_code>
  id: "6"
  summary: create HTML <code>&lt;input&gt;</code> fields that work with your models
sections_007: 
  permalink: form-parameters
  content_id: "4"
  title: Params
  body: |-
    <subhead>params[] </subhead>
    
    <p>When a form is submitted to a Rails application, it parses the raw data and constructs a special hash called <c>params</c> for us to access that data. Simple key/value pairs in the form are converted into key/value pairs in the params hash. However, if a form field contains square brackets <c>[]</c>, Rails will create nested hashes as follows: </p>
    
    <Table aid:trows="5" aid:tcols="2">
    	<Cell><h3>Form input</h3></Cell>
    	<Cell><h3>params hash</h3></Cell>
    	<Cell><r>id=3245</r></Cell>
    	<Cell><r>{:id =&gt; &quot;3245&quot;}</r></Cell>
    	<Cell><r>customer[name]=Miranda</r></Cell>
    	<Cell><r>{:customer =&gt; {:name =&gt; &quot;Miranda}}</r></Cell>
    	<Cell><r>customer[dob][year]=1979</r></Cell>
    	<Cell><r>{:customer =&gt; {:dob =&gt; {:year =&gt; &quot;1979&quot;}}}</r></Cell>
    	<Cell><r>customer[dob][month]=Jan</r></Cell>
    	<Cell><r>{:customer =&gt; {:dob =&gt; {:month =&gt; &quot;Jan&quot;}}}</r></Cell>
    </Table> 
    
    <p>So to find the value of <c>id</c> we would use <c>params[:id]</c>. To find the value of the <c>customer[name]</c> we would use <c>params[:customer][:name]</c>.</p>
  id: "7"
  summary: How form parameters get passed into the <code>params[]</code> hash
